---

# This works properly eventhough the other ssh channels are shutdown
# and flagged as an error.  Issueing reboot command directly, or background
# executing a script doesn't work reliably with different ansible versions.
- name: Reboot System
  shell: "shutdown -r 1 &"
  changed_when: true
  ignore_errors: true

- name: Allow time to complete shutdown
  pause:
  args:
    minutes: 1

- name: Server's ssh port is available
  local_action: wait_for
                host={{ ansible_hostname | default(ansible_fqdn) }}
                delay=30
                port=22
                state=started
                connect_timeout=13
                timeout={{ bootup_timeout }}
  sudo: false

# Make sure host was rebooted dispite ignoring errors on reboot command
# and possibly hitting some quirks with wait_for.
- name: Uptime command output is known
  command: /usr/bin/uptime --pretty
  register: result
  changed_when: false

- name: Uptime output is filtered into integer minutes, converted to seconds
  set_fact:
    uptime_seconds: "{{ result.stdout | regex_replace('^up(?:\\s+\\d+\\s+days?,)?(?:\\s+\\d+\\s+hours?,)?\\s+(\\d+)\\s+minutes?.*$', '\\\\1') | int() * 60 }}"

- fail:
  args:
    msg: "System uptime {{ uptime_seconds }}s is longer than reboot timeout {{ bootup_timeout }}s"
  when: "{{ uptime_seconds }} > {{ bootup_timeout + shutdown_timeout }}"
