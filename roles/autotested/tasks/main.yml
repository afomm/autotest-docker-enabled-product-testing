---

- name: Docker Service Restarted
  service:
  args:
    name: docker
    state: restarted

- name: Base directory of Docker Autotest is defined
  set_fact:
    autotest_docker_path: "{{ autotest_docker.autotest_dir }}/client/tests/docker"

- name: Autotest directory is removed
  file:
    path: "{{ autotest_docker.autotest_dir }}"
    state: absent

- name: Cached Autotest is copied
  synchronize:
    dest: "{{ autotest_docker.autotest_dir }}"
    src: "{{ autotest_docker.cache_dir }}/autotest/"

- name: Untracked RELEASE-VERSION is removed
  file:
    path: "{{ autotest_docker.autotest_dir }}/RELEASE-VERSION"
    state: absent

- name: Cached Docker Autotest is copied
  synchronize:
    dest: "{{ autotest_docker_path }}"
    src: "{{ autotest_docker.cache_dir }}/autotest-docker/"

- name: Custom configuration is cleared
  file:
  args:
    path: "{{ autotest_docker_path }}/config_custom"
    state: absent

- name: Custom configuration directory exists
  file:
  args:
    path: "{{ autotest_docker_path }}/config_custom"
    state: directory

- include: test_image_fqin.yml

# Hook for inclusion of additional files
- name: Copy files from autotest_docker.copies list
  copy:
  args:
    content: "{{ item.content | default(omit) }}"
    dest: "{{ autotest_docker_path }}/{{ item.dest | default(omit) }}"
    directory_mode: "{{ item.directory_mode | default(omit) }}"
    follow: "{{ item.follow | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    selevel: "{{ item.selevel | default(omit) }}"
    serole: "{{ item.serole | default(omit) }}"
    setype: "{{ item.setype | default(omit) }}"
    seuser: "{{ item.seuser | default(omit) }}"
    src: "{{ item.src | default(omit) }}"
    validate: "{{ item.validate | default(omit) }}"
  with_items: autotest_docker.copies
  when: autotest_docker.copies is defined and
        autotest_docker.copies != None

# Hook for inclusion of additional configuration templates/files
- name: Resolve autotest_docker templates
  template:
  args:
    dest: "{{ autotest_docker_path }}/{{ item.dest | default(omit) }}"
    follow: "{{ item.follow | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    selevel: "{{ item.selevel | default(omit) }}"
    serole: "{{ item.serole | default(omit) }}"
    setype: "{{ item.setype | default(omit) }}"
    seuser: "{{ item.seuser | default(omit) }}"
    src: "{{ item.src | default(omit) }}"
    validate: "{{ item.validate | default(omit) }}"
  with_items: autotest_docker.templates
  when: autotest_docker.templates is defined and
        autotest_docker.templates != None

- include: configure_defaults.yml

- include: configure_control.yml

- name: Results directory is empty
  file:
  args:
    path: "{{ autotest_docker.autotest_dir }}/client/results"
    state: absent
  when: autotest_docker.execute

- name: Junit results don't exist
  file:
  args:
    path: "/tmp/results.junit"
    state: absent
  when: autotest_docker.execute

- name: Tarball results don't exist
  file:
  args:
    path: "/tmp/results.tbz"
    state: absent
  when: autotest_docker.execute

- name: Docker autotest execution variable is shown
  debug: var=autotest_docker
  when: autotest_docker.execute

- name: Execute Docker autotest
  command: "{{ autotest_docker.autotest_dir }}/client/autotest-local {{ autotest_docker_path }}/control"
  register: autotest_execution
  # This should be autotest_docker.timeout, but can't use var here :(
  async: 14401
  poll: 60
  when: autotest_docker.execute

- name: Collect results table for printing
  shell: tools/scan_results.py
  args:
    chdir: "{{ autotest_docker.autotest_dir }}/client"
  register: results
  notify: Collect autotest results text
  ignore_errors: true

- name: Create tarball of results
  command: tar cjf /tmp/results.tbz results
  args:
    chdir: "{{ autotest_docker.autotest_dir }}/client"
  register: resultstarball
  when:  autotest_docker.execute and
         autotest_execution is defined and
         autotest_execution|success

- name: Create tarball of custom configuration
  command: tar cjf /tmp/config.tbz config_custom
  args:
    chdir: "{{ autotest_docker_path }}"
  register: resultstarball
  when:  autotest_docker.execute and
         autotest_execution is defined and
         autotest_execution|success

- name: Convert Results to text-table
  shell: tools/scan_results.py > /tmp/results.txt
  args:
    chdir: "{{ autotest_docker.autotest_dir }}/client"
  # This thing is really easy to break
  ignore_errors: true

- name: Create list of installed rpms
  shell: rpm -qa > /tmp/rpmqa.txt
  # This could break
  ignore_errors: true

# Sometimes this breaks if a test fails in the "wrong" way.
- name: Convert Results to junit
  shell: tools/results2junit.py results/default > /tmp/results.junit
  args:
    chdir: "{{ autotest_docker.autotest_dir }}/client"
  register: results2junit
  # This thing is also really easy to break
  ignore_errors: true
  when: autotest_docker.execute and
        autotest_execution is defined and
        autotest_execution|success

- include: collect_results.yml
