---

# Main entry-point for slave/ansible operations.  Agnostic
# to underlying cloud-technology used for the slave itself.

# Create/Copy only the bare-minimum of what's needed to bootstrap
# ansible for a 'localhst' play.
- command:
    filepath: /usr/bin/mkdir
    arguments: |
        --parents
        $WORKSPACE/inventory

- command:
    filepath: /usr/bin/cp
    arguments: |
        --no-clobber
        $ADEPT_PATH/files/localhost
        $WORKSPACE/inventory/localhost

- command:
    filepath: /usr/bin/cp
    arguments: |
        --no-clobber
        /etc/ansible/ansible.cfg
        $ADEPT_PATH/files/variables.yml
        $WORKSPACE/

# Allow just the slave to set itself up (includes ansible.cfg)
- playbook:
    # Only run in this context
    contexts:
        - setup
    # $WORKSPACE relative or absolute path to playbook yaml
    filepath: $ADEPT_PATH/localhost.yml

    # Optional string to pass to the --limit option ($HOSTNAME is magic)
    limit: localhost

    # Unless False, pass called context through in 'adept_context' variable
    # pass_context: True

    # Path to file of additional variables
    varsfile: $WORKSPACE/variables.yml

    # Optional inventory file/directory/script to pass through on command-line
    inventory: $WORKSPACE/inventory

    # Optional ansible configuration file to pass through in ANSIBLE_CONFIG
    config: $WORKSPACE/ansible.cfg

# Run site playbook now after self-setup (above)
- playbook:
    filepath: $ADEPT_PATH/$ADEPT_CONTEXT.yml
    varsfile: $WORKSPACE/variables.yml
    inventory: $WORKSPACE/inventory
    config: $WORKSPACE/ansible.cfg
    exitfile: $WORKSPACE/$ADEPT_CONTEXT.exit

# Ignore cleanup exit-status (it can fail for many reasons)
# TODO: add basic scripted cleanup checks
- command:
    contexts:
        - setup
        - run
    filepath: /usr/bin/bash
    arguments: -c 'exit $(cat $WORKSPACE/$ADEPT_CONTEXT.exit)'

# No reason to leave successful exit files sitting around
- command:
    filepath: /usr/bin/rm
    arguments: -f $WORKSPACE/*.exit
